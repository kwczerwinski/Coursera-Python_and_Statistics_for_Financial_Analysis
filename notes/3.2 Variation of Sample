# Sampling from normal distribution
Fstsample = pd.DataFrame(np.random.normal(10, 5, size=30))
print('\nSample statistics:'
      '\n              mean: ', Fstsample[0].mean(),  # should be around 10
      '\nstandard deviation: ', Fstsample[0].std(ddof=1))  # should be around 5
# Variation of sample - different samples yield different mean and std,
# but because samples are taken from same population there are rules over how mean and std changes


# Empirical distribution of sample mean and variance
meanlist = []
varlist = []
for _ in range(1000):
    sample = pd.DataFrame(np.random.normal(10, 5, size=30))
    meanlist.append(sample[0].mean())
    varlist.append(sample[0].var(ddof=1))

print(meanlist)
print(varlist)

collection = pd.DataFrame()
collection['meanlist'] = meanlist
collection['varlist'] = varlist
# collection['meanlist'].hist(bins=200, density=True)  # normed=1 is not working, probably replaced by density=True
# collection['varlist'].hist(bins=100, density=True)
# meanlist looks somewhat like normal distribution
# varlist is skewed to the right


# Central limit theorem
# If the sample size is larger enough, the distribution of sample mean is approximately normal with N(mu, sigma^2/n)
smallsamplemeanlist = []
largesamplemeanlist = []
pop = pd.DataFrame([1, 0, 1, 0, 1])
for _ in range(100000):
    sample = pop[0].sample(10, replace=True)
    smallsamplemeanlist.append(sample.mean())
    sample = pop[0].sample(2000, replace=True)
    largesamplemeanlist.append(sample.mean())
col = pd.DataFrame()
col['smallsamplemeans'] = smallsamplemeanlist
col['largesamplemeans'] = largesamplemeanlist
# col['smallsamplemeans'].hist(bins=500, density=True)
# col['largesamplemeans'].hist(bins=500, density=True)
# histogram will not look normal for small samples, but with large sample it will look normal
# TODO: I'm not sure if it's true. It'll always look somewhat normal,
#  but with small sample it's more likely to be skewed. And with large sample you have
#  a bell curve multiplied by something like sine wave.